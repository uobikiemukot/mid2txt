--- a	2011-07-19 16:32:53.000000000 +0900
+++ b	2011-07-19 16:34:36.000000000 +0900
@@ -5,10 +5,12 @@
 09/04/05-09/04/07 ver 0.1
 09/09/29-09/10/01 ver 0.2 rest note at start of mid
 09/10/15 ver 0.25 error massage / usage fix
+11/07/19 code refine / !remove ver 0.2 rest note fix
 
 usage: mid2txt <input file>
 */
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -16,10 +18,13 @@
 #include <stdlib.h>
 
-#define BUFSIZE 8192*2
-#define LISTNUM 16
+enum{
+DEBUG = 1,
+BUFSIZE = 8192,
+};
 
-typedef enum {HEADER = 0, TRACK, DELTA, MIDI, SYSEX, META} state;
+typedef enum{HEADER = 0, TRACK, DELTA, MIDI, SYSEX, META} state;
 
 struct hdinfo{
@@ -29,11 +34,10 @@
 unsigned int division;
 };
 
-struct note_header{
 struct note_header *next;
 struct note_header *prev;
 };
@@ -55,17 +59,17 @@
 
 struct hdinfo hd;
-unsigned char *p;
 
 int main(int argc, char *argv[], char *env[])
 {
 int i = 0;
 unsigned int tracklen, deltatime;
 
@@ -73,47 +77,47 @@
 if (argc < 2){
 fprintf(stderr, "fewer arguments.\n");
 fprintf(stderr, "usage: mid2txt <midi file>\n");
-exit(1);
+exit(EXIT_FAILURE);
 }
 else{
 if ((fd = open(argv[1], O_RDONLY)) < 0){
 perror("open");
-exit(1);
+exit(EXIT_FAILURE);
 }
 else{
 init();
 
 prev_status[0] = 0;
 prev_status[1] = 0;
 
 while ((n = read(fd, buf, BUFSIZE)) > 0){
-p = &buf[0];
+ptr_buf = &buf[0];
 const unsigned char * const endp = buf + n;
 
-while (p < endp){
+while (ptr_buf < endp){
 switch (state){
 case HEADER:
 getheader();
 state = TRACK;
 break;
 case TRACK:
 destroy();
 
 tracklen = gettrack();
 state = DELTA;
 break;
 case DELTA:
 deltatime = getdelta();
 state = checkmsg();
 break;
 case MIDI:
@@ -128,18 +132,18 @@
 state = getmeta();
 break;
 default:
-fprintf(stderr, "exit...\n");
-exit(0);
+fprintf(stderr, "unknown state! exit...\n");
+exit(EXIT_FAILURE);
 }
 }
 }
 destroy();
 
 if (close(fd) < 0){
 perror("close");
-exit(-2);
+exit(EXIT_FAILURE);
 }
 }
 }
@@ -149,59 +153,49 @@
 
 void getheader()
 {
-int i = 0;
-while (i++ < 4)
-fprintf(stderr, "%c %d\n", *p++, i);
-*/
-p += 4;
+ptr_buf += 4;
 
-p += 3;
-hd.datalen = *p++;
-
-p += 1;
-hd.format = *p++;
-
-p += 1;
-hd.tracknum = *p++;
+ptr_buf += 3;
+hd.datalen = *ptr_buf++;
+
+ptr_buf += 1;
+hd.format = *ptr_buf++;
+
+ptr_buf += 1;
+hd.tracknum = *ptr_buf++;
 
-hd.division = *p++;
+hd.division = *ptr_buf++;
 hd.division <<= 8;
+hd.division |= *ptr_buf++;
 
-#ifdef DEBUG
+if (DEBUG){
 fprintf(stderr, "--- smf header ---\n");
-fprintf(stderr, "datalen:%d\nformat:%d\ntracknum:%d\ndivision:%d\n",
+fprintf(stderr, "datalen:%d\nformat:%d\ntracknum:%d\ndivision:%d\n", \
 hd.datalen, hd.format, hd.tracknum, hd.division);
-#endif
+}
 }
 
 state checkmsg()
 {
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "midi! --> ");
-#endif
 return MIDI;
 }
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "meta! --> ");
-#endif
 return META;
 }
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "sysex! -> ");
-#endif
 return SYSEX;
 }
 else
@@ -211,9 +205,8 @@
 fprintf(stderr, "cant find 'status byte'.\n");
 else{
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "assume 'running status' is used.\n");
-#endif
 prev_status[1] = 1;
 return MIDI;
 }
@@ -226,23 +219,22 @@
 {
 unsigned int datalen = 0;
 int i = 0;
-i = 0;
-while (i++ < 4)
-fprintf(stderr, "%c %d\n", *p++, i);
-*/
-p += 4;
 
+ptr_buf += 4;
+
 while (i < 4){
 if (i != 0)
 datalen <<= 8;
-datalen |= *p++;
+datalen |= *ptr_buf++;
 i++;
 }
+
+if (DEBUG){
+fprintf(stderr, "--- smf header ---\n");
+fprintf(stderr, "datalen:%d\n", datalen);
+}
 
 return datalen;
 }
@@ -253,32 +245,30 @@
 struct note_header *lp, *hd;
 int i;
 
-delta |= (0x7f & *p++);
+delta |= (0x7f & *ptr_buf++);
 delta <<= 7;
 }
-delta |= (0x7f & *p++);
+delta |= (0x7f & *ptr_buf++);
 
-#ifdef DEBUG
+if (DEBUG){
 fprintf(stderr, "--- smf ivent ---\n");
 fprintf(stderr, "delta:%d\n", delta);
-#endif
+}
 
 i = 0;
+
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
 if ((lp->data[3]) && (lp->data[4])){
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "del! st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
-#endif
 fprintf(stdout, "%d %d %d %d %d\n", lp->data[0], lp->data[1], lp->st, lp->gt, lp->data[2]);
+
+
 hd ... -> lp -> ... -> hd
 hd ... -> (del) -> ... -> hd
 */
@@ -291,37 +281,39 @@
 i++;
 }
 
 i = 0;
+
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
 if (!(lp->data[3])){
 lp->st += delta;
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "\tadd st! st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
-#endif
 }
 if (!(lp->data[4])){
 lp->gt += delta;
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "\tadd gt! st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
-#endif
 }
 }
 i++;
 }
 
 i = 0;
+
 int count = 0;
+
 while (i < LISTNUM){
 hd = &list_head[i];
 if (hd == hd->next)
 count++;
 i++;
 }
-if (count == LISTNUM && delta != 0) {
+
+if (count == LISTNUM && delta != 0){
 fprintf(stderr, "rest delta:%d\n", delta);
 fprintf(stdout, "0 0 %d 0 0\n", delta);
 }
@@ -333,107 +325,98 @@
 {
 unsigned char status;
 
 status = prev_status[0];
 prev_status[1] = 0;
 }
 else{
-prev_status[0] = status = *p;
-p++;
+prev_status[0] = status = *ptr_buf;
+ptr_buf++;
 }
 
-if (*(p+1) == 0){
-#ifdef DEBUG
+if (*(ptr_buf + 1) == 0){
+if (DEBUG)
 fprintf(stderr, "note off(0x9)\n");
-#endif
 off_note(status);
-p += 2;
+ptr_buf += 2;
 
 }
 else{
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "note on\n");
-#endif
 on_note(status);
-p += 2;
+ptr_buf += 2;
 }
 }
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "note off(0x8)\n");
-#endif
 off_note(status);
-p += 2;
+ptr_buf += 2;
 }
-#ifdef DEBUG
-fprintf(stderr, "control change ch:%x cc:%x val:%x\n", *(p-1)&0x0f, *p, *(p+1));
-#endif
-p += 2;
+if (DEBUG)
+fprintf(stderr, "control change ch:%x cc:%x val:%x\n", *(ptr_buf - 1) & 0x0f, *ptr_buf, *(ptr_buf + 1));
+ptr_buf += 2;
 }
-#ifdef DEBUG
-fprintf(stderr, "program change ch:%x pc:%x\n", *(p-1)&0x0f, *p);
-#endif
-p++;
+if (DEBUG)
+fprintf(stderr, "program change ch:%x ptr_bufc:%x\n", *(ptr_buf - 1) & 0x0f, *ptr_buf);
+ptr_buf++;
 }
 }
 
 void getsysex()
 {
 prev_status[0] = 0;
 prev_status[1] = 0;
 
 unsigned int datalen = 0;
 
+if (DEBUG)
 fprintf(stderr, "sysex message(only skip)\n");
-p++;
+ptr_buf++;
 
-datalen |= (0x7f & *p++);
+datalen |= (0x7f & *ptr_buf++);
 datalen <<= 7;
 }
-datalen |= (0x7f & *p++);
+datalen |= (0x7f & *ptr_buf++);
 
-p += datalen;
+ptr_buf += datalen;
 }
 
 state getmeta()
 {
 prev_status[0] = 0;
 prev_status[1] = 0;
 
-p += 1;
+ptr_buf += 1;
 
-if (*p == 0x2F && *(p+1) == 0x00){
-#ifdef DEBUG
+if (*ptr_buf == 0x2F && *(ptr_buf + 1) == 0x00){
+if (DEBUG)
 fprintf(stderr, "track end\n");
-#endif
-p += 2;
+ptr_buf += 2;
 
 return TRACK;
 }
 else{
 unsigned int datalen = 0;
 
-fprintf(stderr, "smf meta type:%x len:%x\n", *p, *(p+1));
-p++;
+if (DEBUG)
+fprintf(stderr, "smf meta type:%x len:%x\n", *ptr_buf, *(ptr_buf + 1));
+ptr_buf++;
 
-datalen |= (0x7f & *p++);
+datalen |= (0x7f & *ptr_buf++);
 datalen <<= 7;
 }
-datalen |= (0x7f & *p++);
-
-p += datalen;
+datalen |= (0x7f & *ptr_buf++);
+ptr_buf += datalen;
 
 return DELTA;
 }
@@ -443,7 +426,7 @@
 {
 int i = 0;
 
 while (i < LISTNUM){
 list_head[i].prev = &list_head[i];
 list_head[i].next = &list_head[i];
@@ -461,15 +444,14 @@
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "\tset st flag! st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
-#endif
 lp->data[3] = 1;
 }
 i++;
 }
 
 for (lp = hd; ; lp = lp->next){
 if (lp->next == hd){
@@ -480,20 +462,19 @@
 ap->prev = lp;
 lp->next = ap;
 
 
 ap->st = 0;
 ap->gt = 0;
 ap->data[3] = 0;
 ap->data[4] = 0;
 
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "(ch:%d note:%d vel:%d)\n", ap->data[0], ap->data[1], ap->data[2]);
-#endif
 break;
 }
 }
@@ -503,26 +484,23 @@
 {
 struct note_header *lp, *hd;
 int i = 0;
-unsigned char ch = (0x0f & status), note = *p, vel = *(p+1);
+unsigned char ch = (0x0f & status), note = *ptr_buf, vel = *(ptr_buf + 1);
 
-#ifdef DEBUG
+if (DEBUG)
 fprintf(stderr, "(ch:%d note:%d vel:%d)\n", ch, note, vel);
-#endif
 
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
 if (ch == lp->data[0] && note == lp->data[1]){
-#ifdef ALL
+if (DEBUG)
 fprintf(stderr, "\tset gt flag! st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
-#endif
 lp->data[4] = 1;
 }
 }
 i++;
 }
-
 }
 
 void destroy()
@@ -530,21 +508,18 @@
 struct note_header *lp, *hd;
 int i;
 
 i = 0;
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
 if ((lp->data[4])){
-#ifdef ALL
+if (DEBUG){
 fprintf(stderr, "\tdestroy! st:%d gt:%d (ch:%d note:%d)\n", lp->gt, lp->gt, lp->data[0], lp->data[1]);
-#endif
-fprintf(stdout, "%d %d %d %d %d\n", lp->data[0], lp->data[1], lp->gt, lp->gt, lp->data[2]);
+fprintf(stderr, "%d %d %d %d %d\n", lp->data[0], lp->data[1], lp->gt, lp->gt, lp->data[2]);
+}
+
 hd ... -> lp -> ... -> hd
 hd ... -> (del) -> ... -> hd
 */
@@ -557,11 +532,12 @@
 i++;
 }
 
 i = 0;
 while (i < LISTNUM){
 hd = &list_head[i];
 for (lp = hd->next; lp != hd; lp = lp->next){
+if (DEBUG)
 fprintf(stderr, "unreleased note --> st:%d gt:%d (ch:%d note:%d)\n", lp->st, lp->gt, lp->data[0], lp->data[1]);
 free(lp);
 }
